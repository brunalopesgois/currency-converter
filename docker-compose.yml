version: '3'
services:
  api:
    build:
      dockerfile: ./docker/Dockerfile.dev
      context: .
    container_name: converter-service
    profiles: ['ci']
    volumes:
      - .:/usr/app/
      - /usr/app/node_modules
    ports:
      - '3010:3000'
    labels:
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%", "port": "%%port%%"}]'
      com.datadoghq.tags.env: 'development'
      com.datadoghq.tags.service: 'converter-service'
    networks:
      - common
    depends_on:
      - postgres
      - postgres-test
      - redis
  postgres:
    image: postgres:latest
    container_name: postgres
    profiles: ['ci']
    ports:
      - '5432:5432'
    volumes:
      - /data/postgres:/data/postgres
    environment:
      POSTGRES_USER: converter_user
      POSTGRES_PASSWORD: q1w2e3r4
      POSTGRES_DB: converter_db
    networks:
      - common
  postgres-test:
    image: postgres:latest
    container_name: postgres-test
    profiles: ['ci']
    ports:
      - '5433:5432'
    volumes:
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
      - /data/postgres-test:/data/postgres
    environment:
      POSTGRES_USER: test_converter_user
      POSTGRES_PASSWORD: q1w2e3r4
      POSTGRES_DB: test_converter_db
    networks:
      - common
  redis:
    image: redis:6.2-alpine
    container_name: redis
    profiles: ['ci']
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - redis:/data
    networks:
      - common
  dd-agent:
    image: gcr.io/datadoghq/agent:latest
    container_name: dd-agent
    restart: always
    environment:
      - DD_API_KEY=9c9d7621334ee907c7bf0128e0f02f78
      - DD_SITE=datadoghq.com
      - DD_HOSTNAME=development
      - DD_APM_ENABLED=true
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
      - DD_CONTAINER_EXCLUDE=image:gcr.io/datadoghq/agent*
      - DD_CONTAINER_EXCLUDE_METRICS=image:gcr.io/datadoghq/agent*
      - DD_CONTAINER_EXCLUDE_LOGS=image:gcr.io/datadoghq/agent*
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
    networks:
      - common
networks:
  common: {}
volumes:
  redis:
    driver: local
